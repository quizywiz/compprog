#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(i=a;i<b;++i)
#define repi(i,a,b) for(int i=a;i<b;++i)
#define F first
#define S second
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define vi vector<int>
#define sc(a) scanf("%d",&a)
#define pb(a) push_back(a)
#define pr(a) printf("%d",a)
#define prn(a) printf("%d\n",a)
#define scll(a) scanf("%lld",&a)
#define prll(a) printf("%lld",a)
#define prlln(a) printf("%lld\n",a)
typedef long long LL;

class Dinic {
	
	const static int MAXN = 5001;
	public:
	
	vector<int> vertex[MAXN];
	LL cap[MAXN][MAXN];
	LL flow[MAXN][MAXN];
	int level[MAXN];
	int path[MAXN];
	int visit[MAXN];
	LL dinic(int source, int sink) {
		LL ret = 0;
		while(build_level_graph(source, sink)) {
			ret += construct_blocking_flow(source, sink); 
		//	cout<<"ret "<<ret<<endl;
		}
		return ret;
	}
	
	bool build_level_graph(int source, int sink) {
		queue<int> que;
		memset(level, 0, sizeof(level));
		que.push(source);
		level[source] = 1;
		while(!que.empty()) {
			int now = que.front();
			que.pop();
			for(int next : vertex[now]) {
				if((cap[now][next] - flow[now][next] > 0 || flow[next][now]>0) && level[next]==0) {
					que.push(next);
					level[next] = level[now] + 1;
				//	cout<<"level "<<next<<" "<<level[next]<<endl;
				}
			}
		}
		
		return level[sink]!=0;
	}
	
	LL construct_blocking_flow(int source, int sink) {
		stack<int> stk;
		LL ret = 0;
		memset(visit, 0, sizeof(visit));
		stk.push(source);
		while (!stk.empty()) {
			int now = stk.top();
	//		cout<<"now "<<now<<endl;
			if(now != sink) {
				for(int next : vertex[now]) {
				//	cout<<"option "<<next<<" "<<visit[next]<<endl;
					if(stk.top()!=now) 
						break;
					if(visit[next] || level[next]!=level[now]+1) 
						continue;
					if(cap[now][next] - flow[now][next] > 0) {
						stk.push(next);
				//		cout<<"push "<<next<<endl;
						path[next] = now;
					} else if(flow[next][now] > 0) {
						stk.push(next);
						path[next] = -now;
					}
				}
				if(stk.top() == now) {
			//		cout<<"stack top now"<<endl;
					stk.pop();
					visit[now] = 1;
				}
			} else {
			//	cout<<"found"<<endl;
				LL f = 10000000000000ll;
				int bottleneck;
				for(int cur = sink; cur!=source; cur = abs(path[cur])) {
					f = min(f, path[cur] > 0 ? 
						cap[path[cur]][cur] - flow[path[cur]][cur]
						: flow[cur][-path[cur]]);
				}
				for(int cur = sink; cur!= source; cur = abs(path[cur])) {
					if(path[cur] > 0) {
						flow[path[cur]][cur] += f;
						if(cap[path[cur]][cur] - flow[path[cur]][cur] == 0)
							bottleneck = path[cur];
					} else {
						flow[cur][-path[cur]] -= f;
						if(flow[cur][-path[cur]] == 0)
							bottleneck = -path[cur];
					}
				}
				while(!stk.empty() && stk.top() != bottleneck)
					stk.pop();
			//	cout<<"bottle "<<bottleneck<<endl;
			//	cout<<"flow "<<f<<endl;
				ret += f;
			}
		}
		return ret;
	}
};

int n,m;
Dinic d;
int main() {
	// your code goes here
	cin>>n>>m;
	repi(i,0,m) {
		int x,y,c;
		cin>>x>>y>>c;
		if(x==y) continue; // self loop
		if(d.cap[x][y]==0) { // handling duplicate edges
			d.vertex[x].pb(y);
			d.vertex[y].pb(x);
		}
		d.cap[x][y] += c; // undirected edges
		d.cap[y][x] += c;
	}
	
	cout<<d.dinic(1,n)<<endl;
	return 0;
}
