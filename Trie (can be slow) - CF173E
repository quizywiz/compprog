#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(i=a;i<b;++i)
#define repi(i,a,b) for(int i=a;i<b;++i)
#define F first
#define S second
#define mp(a,b) make_pair(a,b)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define vi vector<int>
#define sc(a) scanf("%d",&a)
#define pb(a) push_back(a)
class node {
	public:
	
	node* up;
	int num;
	int end;
	node* next[2];
	node() {
		repi(i,0,2) next[i] = NULL;
		end = 0;
		num = 0;
	}
};
class trie {
	node *root;
	
	node* putin(string& s, node* parent, node* root, int i) {
		if(root == NULL) root = new node();
		root->up = parent;
		root->num ++;
		if(i == s.size()) {
			++ root->end;
			return root;
		}
		root->next[s[i]-'0'] = putin(s, root, root->next[s[i]-'0'], i+1);
		return root;
	}
	
	void max_xor_intl(string& s, string& ret, node* root, int i=0) {
		if(i==s.size()) return;
		
		if(root->next[1-s[i]+'0'] != NULL) {
			ret.pb(1-s[i]+'0'+'0');
			max_xor_intl(s, ret, root->next[1-s[i]+'0'], i+1);
		} else if(root->next[s[i]-'0'] != NULL) {
			ret.pb(s[i]);
			max_xor_intl(s, ret, root->next[s[i]-'0'], i+1);
		}
//		cout<<ret<<" "<<i<<endl;
	}
	public:
	int size;
	void create() {
		size = 0;
		root = NULL;
	}
	void insert(string s) {
		++size;
		root = putin(s, NULL, root, 0);
	}
	void del(node *root) {
		if(root == NULL) return;
		repi(i,0,2) {
			del(root->next[i]);
			root->next[i] = NULL;
			if(root->up != NULL && root->up->next[i]==root) root->up->next[i] = NULL;
		}
		size -= root->end;
		delete root;
	}
	void clear() {
		size = 0;
		del(root);
	}
	
	string max_xor(string s, int i) {
		string ret;
		if(root == NULL) return s;
		max_xor_intl(s, ret, root, i);
		return ret;
	}
};

long long a[100001];
int n;
trie tr;
string to_str(long long x) {
	string ret;
	for(int i=0;i<64;++i) ret.pb(((x>>i)&1)+'0');
	reverse(ret.begin(),ret.end());
	return ret;
}

long long strtol(string x) {
	long long ret = 0;
	for(int i=0;i<64;++i) {
		ret += (x[i]-'0')?(1ll<<(63-i)):0;
	}
	return ret;
}
int main() {
    cin>>n;
    repi(i,0,n) cin>>a[i];
    long long pre = 0;
    long long suf = 0;
    repi(i,0,n) pre ^= a[i];
    tr.create();
    long long maxx = 0;
    for(int i=n;i>=0;--i) {
    	tr.insert(to_str(suf));
    	long long cur = strtol(tr.max_xor(to_str(pre),0));
    //	cout<<i<<" "<<pre<<" "<<cur<<" "<<(cur^pre)<<" "<<suf<<endl;
    	maxx = max(maxx, cur^pre);
    	if(i > 0) pre ^= a[i-1];
    	if(i > 0) suf ^= a[i-1];
    }
    cout<<maxx<<endl;
    tr.clear();
    return 0;
}
